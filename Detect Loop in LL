  // PROBLEM NO. 141 - LL CYCLE
//BRUTE FORCE APPROACH
//TIME COMPLEXITY - o(N LOG(n))
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode *temp = head;
        unordered_map<ListNode* , int > mp;
        while(temp != NULL){
            if(mp.find(temp) != mp.end()){
                return true;
            }
            mp[temp] = 1;
            temp = temp -> next;
        }
        return false;
    }
};

// OPTIMAL APPROACH 
//TIME COMPLEXITY - O(N)
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL){
            return NULL;
        }
        ListNode *slow = head;
        ListNode *fast = head;
        while(fast!=NULL && fast ->next !=NULL){
          
            fast = fast->next->next;
            slow = slow->next;
            if(slow==fast){
                return true;
            }
        }
        return false;
       
    }
};
